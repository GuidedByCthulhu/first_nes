;
; int_vector_table_simple.inc
;
; Interrupt Vector Table assembler directives for Nintendo Entertainment System assembly language.
;
; Written by Greg M. Krsak <greg.krsak@gmail.com>, Feb. 2017
;
; Based on the NintendoAge "Nerdy Nights" tutorials, by bunnyboy:
;   http://nintendoage.com/forum/messageview.cfm?catid=22&threadid=7155
; Based on "Nintendo Entertainment System Architecture", by Marat Fayzullin:
;   http://fms.komkon.org/EMUL8/NES.html
; Based on "Nintendo Entertainment System Documentation", by an unknown author:
;   https://emu-docs.org/NES/nestech.txt
;
; Processor: 8-bit, Ricoh RP2A03 (6502), 1.789773 MHz (NTSC)
; Assembler: NESASM 3.1
;
; Tested with:
; nesasm3 "first_nes.asm"
;
; Tested on:
; Nestopia 1.40
;
; For more information about NES programming in general, try these references:
; https://patater.com/nes-asm-tutorials/
; https://en.wikibooks.org/wiki/NES_Programming/Memory_Map
;
; For more information on the NESASM assembler, try these references:
; http://www.nespowerpak.com/nesasm/usage.txt
;


; The 6502 has three (3) interrupts: IRQ/BRK, NMI, and RESET.
; 
; Each interrupt has a vector. A vector is a 16-bit address which spec-
; ifies a location to "jump to" when the interrupt is triggered.
; 
; IRQ/BRK is triggered under two circumstances, hence its split name:
; when a software IRQ is executed (the BRK instruction), or when a
; hardware IRQ is executed (via the IRQ line).
; 
; RESET is triggered on power-up. The ROM is loaded into memory, and
; the 6502 jumps to the address specified in the RESET vector. No registers
; are modified, and no memory is cleared; these only occur during power-up.
; 
; NMI stands for Non-Maskable Interrupt, and is generated by each refresh
; (VBlank), which occurs at different intervals depending upon the system
; used (PAL/NTSC).
; 
; NMI is updated 60 times/sec. on NTSC consoles, and 50 times/sec on PAL.
; Interrupt latency on the 6502 is seven (7) cycles; this means it takes
; seven cycles to move in and out of an interrupt.
; 
; Most interrupts should return using the RTI instruction. Some NES carts
; do not use this method, such as SquareSoft's "Final Fantasy 1" title.
; These carts return from interrupts in a very odd fashion: by manipul-
; ating the stack by hand, and then doing an RTS. This is technically
; valid, but morally shunned.
;
; When a BRK is encountered, the NES's 6502 pushes the CPU status flag
; onto the stack with the 'b' CPU bit set. On an IRQ or NMI, the CPU
; pushes the status flag onto the stack with the 'b' bit clear. This is
; done because of the fact that a hardware IRQ (IRQ) and a software
; IRQ (BRK) both share the same vector. For example, one could use the
; following code to distinguish the difference between the two:
; 
; The aforementioned interrupts have the following vector addresses,
; mapped to areas of ROM:
; 
;   $FFFA = NMI
;   $FFFC = RESET
;   $FFFE = IRQ/BRK
; 
; Interrupt priorities are as follows:
; 
; Highest = RESET
;           NMI
;  Lowest = IRQ/BRK
;


;
; --- BEGIN Interrupt vector table ---
; Reference: https://en.wikipedia.org/wiki/Interrupts_in_65xx_processors
;
  .DATA


  .BANK 1
  .ORG $fffa     					; First of the three vectors starts here

  .DW ISRVerticalBlank				; When a vertical blanking NMI happens (once per frame if enabled) the processor will jump to the label ISRVerticalBlank
  .DW ISRReset     					; When the processor first turns on or is reset, it will jump to the label ISRReset
  .DW ISRBreak      				; When the processor executes a BRK opcode, it will jump to the label ISRBreak
;
; --- END Interrupt vector table ---
;


; End of int_vector_table_simple.inc
